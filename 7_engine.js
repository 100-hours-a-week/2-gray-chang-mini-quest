//1번 퀘스트
/*
자바스크립트 엔진은 인터프리터 방식이다. 컴파일러 방식은 모든 코드를 바이트언어로 바꾸어 실행시키고, 인터프리터 방식은 코드를 한줄씩 변환하여 실행시킨다.
인터프리터의 특징은 1. 즉시실행, 2. 플랫폼 독립성, 3. 실행속도 빠름, 4. 리소스 사용이 더 많음 이다.
자바스크립트 엔진의 주요 메모리 공간은 스택과 힙으로 구성되어 있다.
- 스택 : 코드가 실행되기 전 변수와 함수를 미리 선언하고 구조를 분석하여 트리로 구성하는 과정
- 힙 : 객체와 같은 동적 데이터가 저장되는 공간

코드가 실행되기 전 먼저 컴파일 과정을 거치는데, 컴파일 과정은 다음의 절차로 이루어진다.
1. 소스코드 읽기(토큰화)
2. 구문 분석(AST 생성)
3. 실행 컨텍스트 생성
4. 렉시컬 환경 및 렉시컬 스코프 결정
5. 호이스팅

컴파일 과정이 끝나면, 실행을 하게 되는데, 실행은 다음 단계로 이루어진다.
1. 바이트코드 생성
2. 변수 할당과 실행
3. 스코프 체인
*/

//2번 퀘스트
// 1. let 키워드를 사용한 변수의 호이스팅 확인하기
console.log(messageLet); // 무엇이 출력될까요?
let messageLet = "Hello with let!";

// 2. const 키워드를 사용한 변수의 호이스팅 확인하기
console.log(messageConst); // 무엇이 출력될까요?
const messageConst = "Hello with const!";

// 3. 화살표 함수의 호이스팅 확인하기
console.log(greet()); // 무엇이 출력될까요?
const greet = () => "Hello, Arrow Function!";
/*
1번, 2번, 3번 define되지 않았다는 에러를 발생시킨다.
let과 const변수는 초기화되지 않고 TDZ(Temporal Dead Zone)에 들어가게 된다. 만약 messageLet이 var이라면 undifined가 출력되겠지만 그렇지 않아서 에러가 발생한다.
일반 괄호형 함수는 호이스팅되지만 화살표함수는 호이스팅되지 않는다. 따라서 에러가 발생한다. 
*/